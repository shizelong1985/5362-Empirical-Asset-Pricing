),
.f = ~ compute_portfolio_returns(
n_portfolios = ..1,
exchanges = ..2,
value_weighted = ..3,
data = eval_tidy(..4)
)
))
p_hacking_setup <- p_hacking_setup |>
mutate(premium = future_pmap(
.l = list(
n_portfolios,
exchanges,
value_weighted,
data
),
.f = ~ compute_portfolio_returns(
n_portfolios = ..1,
exchanges = ..2,
value_weighted = ..3,
data = eval_tidy(..4)
)
))
data <- tbl(tidy_finance, "data") |>
collect()
library(tidyverse)
library(RSQLite)
library(lubridate)
library(scales)
library(sandwich)
library(lmtest)
library(furrr)
library(rlang)
defaultW <- getOption("warn")
options(warn = -1)
setwd("/Users/tobiasbrammer/Library/Mobile Documents/com~apple~CloudDocs/Documents/Aarhus Uni/8. semester/5362-Empirical-Asset-Pricing/Project/Data")
tidy_finance <- dbConnect(
SQLite(),
"data/tidy_finance.sqlite",
extended_types = TRUE
)
data <- tbl(tidy_finance, "data") |>
collect()
p_hacking_setup <- expand_grid(
n_portfolios = c(2, 5, 10),
exchanges = c("NYSE"),
value_weighted = c(TRUE, FALSE),
data = parse_exprs(
'data;
data |> filter(industry != "Manufacturing");
data |> filter(month < "2013-06-01");
data |> filter(month >="2013-06-01")'
)
)
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
plan(multisession, workers = availableCores())
p_hacking_setup <- p_hacking_setup |>
mutate(premium = future_pmap(
.l = list(
n_portfolios,
exchanges,
value_weighted,
data
),
.f = ~ compute_portfolio_returns(
n_portfolios = ..1,
exchanges = ..2,
value_weighted = ..3,
data = eval_tidy(..4)
)
))
rlang::last_error()
data |>
group_by(month) |>
mutate(
top01 = if_else(mktcap >= quantile(mktcap, 0.99), 1, 0),
top05 = if_else(mktcap >= quantile(mktcap, 0.95), 1, 0),
top10 = if_else(mktcap >= quantile(mktcap, 0.90), 1, 0),
top25 = if_else(mktcap >= quantile(mktcap, 0.75), 1, 0),
total_market_cap = sum(mktcap)
) |>
summarize(
`Largest 1% of stocks` = sum(mktcap[top01 == 1]) / total_market_cap,
`Largest 5% of stocks` = sum(mktcap[top05 == 1]) / total_market_cap,
`Largest 10% of stocks` = sum(mktcap[top10 == 1]) / total_market_cap,
`Largest 25% of stocks` = sum(mktcap[top25 == 1]) / total_market_cap,
.groups = "drop"
) |>
pivot_longer(cols = -month) |>
mutate(name = factor(name, levels = c(
"Largest 1% of stocks", "Largest 5% of stocks",
"Largest 10% of stocks", "Largest 25% of stocks"
))) |>
ggplot(aes(
x = month,
y = value,
color = name,
linetype = name)) +
geom_line() +
scale_y_continuous(labels = percent, limits = c(0, 1)) +
labs(
x = NULL, y = NULL, color = NULL, linetype = NULL,
title = "Percentage of total market capitalization in largest stocks"
)
data |>
group_by(month, exchange) |>
summarize(mktcap = sum(mktcap),
.groups = "drop_last") |>
mutate(share = mktcap / sum(mktcap)) |>
ggplot(aes(
x = month,
y = share,
fill = exchange,
color = exchange)) +
geom_area(
position = "stack",
stat = "identity",
alpha = 0.5
) +
geom_line(position = "stack") +
theme_economist() +
scale_fill_economist() +
scale_y_continuous(labels = percent) +
labs(
x = NULL, y = NULL, fill = NULL, color = NULL,
title = "Share of total market capitalization per listing exchange"
)
data |>
group_by(month, exchange) |>
summarize(mktcap = sum(mktcap),
.groups = "drop_last") |>
mutate(share = mktcap / sum(mktcap)) |>
ggplot(aes(
x = year,
y = share,
fill = exchange,
color = exchange)) +
geom_area(
position = "stack",
stat = "identity",
alpha = 0.5
) +
geom_line(position = "stack") +
theme_economist() +
scale_fill_economist() +
scale_y_continuous(labels = percent) +
labs(
x = NULL, y = NULL, fill = NULL, color = NULL,
title = "Share of total market capitalization per listing exchange"
)
data |>
group_by(year, exchange) |>
summarize(mktcap = sum(mktcap),
.groups = "drop_last") |>
mutate(share = mktcap / sum(mktcap)) |>
ggplot(aes(
x = year,
y = share,
fill = exchange,
color = exchange)) +
geom_area(
position = "stack",
stat = "identity",
alpha = 0.5
) +
geom_line(position = "stack") +
theme_economist() +
scale_fill_economist() +
scale_y_continuous(labels = percent) +
labs(
x = NULL, y = NULL, fill = NULL, color = NULL,
title = "Share of total market capitalization per listing exchange"
)
compute_portfolio_returns <- function(n_portfolios = 10,
exchanges = c("NYSE"),
value_weighted = TRUE,
data = data) {
data |>
group_by(month) |>
mutate(portfolio = assign_portfolio(
n_portfolios = n_portfolios,
exchanges = exchanges,
data = cur_data()
)) |>
group_by(month, portfolio) |>
summarise(
ret = if_else(value_weighted,
weighted.mean(ret_excess, mktcap),
mean(ret_excess)
)
) |>
summarise(premium = ret[portfolio == min(portfolio)] -
ret[portfolio == max(portfolio)])
}
compute_portfolio_returns(4,c("NYSE"),FALSE,data)
# Get lagged variables
data <- data |>
group_by(permno) |>
mutate(
# Lagged variables
at_lag = coalesce(lag(at),0),
lt_lag = coalesce(lag(lt),0),
capx_lag = coalesce(lag(capx),0),
mktcap = coalesce(lag(mktcap),0),
revt_lag = coalesce(lag(revt),0),
fcf_lag = coalesce(lag(fcf),0),
lev_lag = coalesce(lag(lev),0),
profit_lag = coalesce(lag(profit),0),
) |>
ungroup()
# Get lagged variables
data <- data |>
group_by(permno) |>
mutate(
# Lagged variables
at_lag = coalesce(lag(at),0),
lt_lag = coalesce(lag(lt),0),
capx_lag = coalesce(lag(capx),0),
mktcap = coalesce(lag(mktcap),0),
fcf_lag = coalesce(lag(fcf),0),
lev_lag = coalesce(lag(lev),0),
profit_lag = coalesce(lag(profit),0),
) |>
ungroup()
library(tidyverse)
library(lubridate)
library(scales)
library(RSQLite)
library(dbplyr)
library(RPostgres)
library(frenchdata)
library(sandwich)
library(mice)
library(ggthemes)
rm(list = ls())
setwd("/Users/tobiasbrammer/Library/Mobile Documents/com~apple~CloudDocs/Documents/Aarhus Uni/8. semester/5362-Empirical-Asset-Pricing/Project/Data")
start_date <- ymd("1963-07-01")
end_date <- ymd("2022-12-31")
##### Create/connect to local database #####
db_connection <- dbConnect(
SQLite(),
"data/db_connection.sqlite",
extended_types = TRUE
)
### Connect to CRSP Database ###
wrds <- dbConnect(
Postgres(),
host = "wrds-pgdata.wharton.upenn.edu",
dbname = "wrds",
port = 9737,
sslmode = "require",
user = "tbrammer",
password = "naqgUf-bantas-1ruwby"
)
########## Returns Data and Factors ##########
### FF5 ###
factors_ff_monthly_raw <- download_french_data("Fama/French 5 Factors (2x3)")
factors_ff_monthly <- factors_ff_monthly_raw$subsets$data[[1]] |>
transmute(
month = floor_date(ymd(str_c(date, "01")), "month"),
rf = as.numeric(RF) / 100,
mkt_excess = as.numeric(`Mkt-RF`) / 100,
smb = as.numeric(SMB) / 100,
hml = as.numeric(HML) / 100,
rmw = as.numeric(RMW) / 100,
cma = as.numeric(CMA) / 100,
) |>
filter(month >= start_date & month <= end_date)
# Write table
dbWriteTable(db_connection,
"factors_ff_monthly",
value = factors_ff_monthly,
overwrite = TRUE
)
########## CRSP Data ##########
# the CRSP monthly security file,
msf_db <- tbl(wrds, in_schema("crsp", "msf"))
# the identifying information,
msenames_db <- tbl(wrds, in_schema("crsp", "msenames"))
# and the delisting information.
msedelist_db <- tbl(wrds, in_schema("crsp", "msedelist"))
# (i) we keep only data in the time windows of interest,
# (ii) we keep only US-listed stocks as identified via share codes shrcd 10 and 11, and
# (iii) we keep only months within permno-specific start dates namedt and end dates nameendt.
# In addition, we add delisting codes and returns.
crsp_monthly <- msf_db |>
filter(date >= start_date & date <= end_date) |>
inner_join(
msenames_db |>
filter(shrcd %in% c(10, 11)) |>
select(permno, exchcd, siccd, namedt, nameendt),
by = c("permno")
) |>
filter(date >= namedt & date <= nameendt) |>
mutate(month = floor_date(date, "month")) |>
left_join(
msedelist_db |>
select(permno, dlstdt, dlret, dlstcd) |>
mutate(month = floor_date(dlstdt, "month")),
by = c("permno", "month")
) |>
select(
permno, # Security identifier
date,   # Date of the observation
month,  # Month of the observation
ret,    # Return
shrout, # Shares outstanding (in thousands)
altprc, # Last traded price in a month
exchcd, # Exchange code
siccd,  # Industry code
dlret,  # Delisting return
dlstcd  # Delisting code
) |>
collect() |>
mutate(
month = ymd(month),
shrout = shrout * 1000
)
# Transforming listing exchange codes to explicit exchange names.
crsp_monthly <- crsp_monthly |>
mutate(exchange = case_when(
exchcd %in% c(1, 31) ~ "NYSE",
exchcd %in% c(2, 32) ~ "AMEX",
exchcd %in% c(3, 33) ~ "NASDAQ",
TRUE ~ "Other"
))
# Industries
crsp_monthly <- crsp_monthly |>
mutate(industry = case_when(
siccd >= 1 & siccd <= 999 ~ "Agriculture",
siccd >= 1000 & siccd <= 1499 ~ "Mining",
siccd >= 1500 & siccd <= 1799 ~ "Construction",
siccd >= 2000 & siccd <= 3999 ~ "Manufacturing",
siccd >= 4000 & siccd <= 4899 ~ "Transportation",
siccd >= 4900 & siccd <= 4999 ~ "Utilities",
siccd >= 5000 & siccd <= 5199 ~ "Wholesale",
siccd >= 5200 & siccd <= 5999 ~ "Retail",
siccd >= 6000 & siccd <= 6799 ~ "Finance",
siccd >= 7000 & siccd <= 8999 ~ "Services",
siccd >= 9000 & siccd <= 9999 ~ "Public",
TRUE ~ "Missing"
))
# Market cap
crsp_monthly <- crsp_monthly |>
mutate(
mktcap = abs(shrout * altprc) / 1000000,
mktcap = na_if(mktcap, 0)
)
# Reflect the returns of investors who bought a stock in the month before
# delisting and held it until the delisting date.
crsp_monthly <- crsp_monthly |>
mutate(ret_adj = case_when(
is.na(dlstcd) ~ ret,
!is.na(dlstcd) & !is.na(dlret) ~ dlret,
dlstcd %in% c(500, 520, 580, 584) |
(dlstcd >= 551 & dlstcd <= 574) ~ -0.30,
dlstcd == 100 ~ ret,
TRUE ~ -1
)) |>
select(-c(dlret, dlstcd))
# Join with FF
factors_ff_monthly <- tbl(db_connection, "factors_ff_monthly") |>
collect()
crsp_monthly <- crsp_monthly |>
left_join(factors_ff_monthly |> select(month, rf),
by = "month"
) |>
mutate(
ret_excess = ret_adj - rf,
ret_excess = pmax(ret_excess, -1)
) |>
select(-ret_adj, -rf)
# Calculate cumulative returns
crsp_monthly <- crsp_monthly |>
group_by(permno) |>
mutate(
ret_cum = cumprod(1 + ret_excess) - 1
)
head(crsp_monthly)
# Drop observations with no market cap and no returns
crsp_monthly <- crsp_monthly |>
drop_na(ret_excess, ret_cum, mktcap)
head(crsp_monthly)
# Drop observations with no market cap and no returns
crsp_monthly <- crsp_monthly |>
drop_na(ret_excess, ret_cum, mktcap)
# Store in DB
dbWriteTable(db_connection,
"crsp_monthly",
value = crsp_monthly,
overwrite = TRUE
)
########## Compustat Fundamentals ##########
funda_db <- tbl(wrds, in_schema("comp", "funda"))
# (i) we get only records in industrial data format,
# (ii) in the standard format (i.e., consolidated information in standard presentation), and
# (iii) only data in the desired time window.
compustat <- funda_db |>
filter(
indfmt == "INDL" &
datafmt == "STD" &
consol == "C"
& datadate >= start_date & datadate <= end_date
) |>
select(
gvkey, # Firm identifier
datadate, # Date of the accounting data
seq, # Stockholders' equity
ceq, # Total common/ordinary equity
at, # Total assets
lt, # Total liabilities
txditc, # Deferred taxes and investment tax credit
txdb, # Deferred taxes
itcb, # Investment tax credit
sale, # Sales
revt, # Total revenue
xrd, # R&D
oancf, # Operating cash flow
ni, # Net income
dltt, # Long-term Debts
dlc, # Debt in current Liabilities
pstkrv, # Preferred stock redemption value
pstkl, # Preferred stock liquidating value
pstk, # Preferred stock par value
capx  # Capital investment
) |>
collect()
summary(compustat)
# Record the month and year of the accounting data
compustat <- compustat |>
mutate(month_num = month(datadate),
month = floor_date(ymd(datadate), unit = "month"),
year = year(datadate)
)
summary(compustat)
compustat <- compustat |>
mutate(
xrd = replace_na(xrd,0),
capx = replace_na(capx,0),
oancf = replace_na(oancf,0)
)
summary(compustat)
# Store in DB
dbWriteTable(db_connection,
"compustat",
value = compustat,
overwrite = TRUE
)
summary(compustat)
# Get the matching table from CRSP
ccmxpf_linktable <- tbl(wrds, in_schema("crsp", "ccmxpf_linktable")) |>
filter(linktype %in% c("LU", "LC") &
linkprim %in% c("P", "C") &
usedflag == 1) |>
select(permno = lpermno, gvkey, linkdt, linkenddt) |>
collect() |>
mutate(linkenddt = replace_na(linkenddt, today()))
# Id's
ccm_links <- crsp_monthly |>
inner_join(ccmxpf_linktable, by = "permno") |>
filter(!is.na(gvkey) & (date >= linkdt & date <= linkenddt)) |>
select(permno, gvkey, date)
crsp_monthly <- crsp_monthly |>
left_join(ccm_links, by = c("permno", "date"))
# Update CRSP
dbWriteTable(db_connection,
"crsp_monthly",
value = crsp_monthly,
overwrite = TRUE
)
########## Create full dataset ##########
head(crsp_monthly)
head(compustat)
n_distinct(crsp_monthly$gvkey)
n_distinct(compustat$gvkey)
data <- crsp_monthly |>
group_by(gvkey, month) |>
left_join(compustat, by = c("gvkey", "month"))
### Drop where exchange is Other ###
data |>
filter(exchange == "Other") |>
summary()
### Drop where exchange is Other ###
data <- data |>
filter(exchange != "Other")
# Calculate the book value of preferred stock and equity
data <- data |>
mutate(
be = coalesce(seq, ceq + pstk, at - lt) +
coalesce(txditc, txdb + itcb, 0) -
coalesce(pstkrv, pstkl, pstk, 0),
be = if_else(be <= 0, as.numeric(NA), be),
lev = coalesce((dltt + dlc)/at,NA),
profit = coalesce(ni/at,NA),
fcf = coalesce(oancf - capx, NA)
)
summary(data)
data <- data |>
select(-c(seq,ceq,txditc,txdb,itcb,sale,oancf,dlc,dltt,pstkrv,pstk,exchcd,siccd))
data <- data |>
drop_na(at, lt, revt, xrd, ni, pstkl, capx, month_num, year, be, lev, profit, fcf)
# Number of stocks
n_distinct(data$gvkey)
dim(data)
# Write to DB
dbWriteTable(db_connection,
"data",
value = data,
overwrite = TRUE
)
# Optimize DB
dbExecute(db_connection, "VACUUM;")
